#!/usr/bin/env bash
# Cohesion CLI
set -euo pipefail

# ---- Spinner (TTY-only, opt-out via COHESION_SPINNER=0) ---------------------
_spinner_can() { [[ -t 1 ]] && [[ "${COHESION_SPINNER:-1}" != "0" ]]; }
_spinner_start() {
  _spinner_can || return 0
  _SPIN_MSG="$1"; shift || true
  _SPIN_FRAMES='|/-\'
  _SPIN_IDX=0
  printf "%s " "$_SPIN_MSG" >&2
  tput civis 2>/dev/null || true
  (
    while :; do
      printf "\r%s %s" "$_SPIN_MSG" "${_SPIN_FRAMES:_SPIN_IDX++%4:1}" >&2
      sleep 0.1
    done
  ) &
  _SPIN_PID=$!
  trap '_spinner_stop fail >/dev/null 2>&1 || true' INT TERM EXIT
}
_spinner_stop() {
  # $1: ok|fail|skip (default ok)
  local s="${1:-ok}"
  [[ -n "${_SPIN_PID:-}" ]] && kill "${_SPIN_PID}" 2>/dev/null || true
  wait "${_SPIN_PID:-}" 2>/dev/null || true
  tput cnorm 2>/dev/null || true
  case "$s" in
    ok)   printf "\r%s ✓\n" "${_SPIN_MSG:-Done}" >&2 ;;
    fail) printf "\r%s ✗\n" "${_SPIN_MSG:-Failed}" >&2 ;;
    skip) printf "\r%s …\n" "${_SPIN_MSG:-Skipped}" >&2 ;;
  esac
  trap - INT TERM EXIT
  unset _SPIN_PID _SPIN_MSG
}
# Run a command with spinner message:
_spin() { # _spin "Message" command [args...]
  local msg="$1"; shift
  _spinner_start "$msg"
  if "$@"; then _spinner_stop ok; else _spinner_stop fail; return 1; fi
}


COHESION_DIR="${HOME}/.cohesion"
BIN_DIR="${COHESION_DIR}/bin"
MANIFEST_FILE="${COHESION_DIR}/.manifest.json"

PROJECT_DIR="${PWD}"
CLAUDE_DIR="${PROJECT_DIR}/.claude"
HOOKS_DIR="${CLAUDE_DIR}/hooks"
UTILS_DIR="${CLAUDE_DIR}/utils"
STATE_DIR="${CLAUDE_DIR}/state"

# --- helpers ---
assume_defaults() { [ "${COHESION_ASSUME_DEFAULTS:-0}" = "1" ]; }
have_jq(){ command -v jq >/dev/null 2>&1; }
ensure_dirs(){ mkdir -p "$HOOKS_DIR" "$UTILS_DIR" "$STATE_DIR"; }
_have_rsync(){ command -v rsync >/dev/null 2>&1; }

project_state() {
  if   [ -f "$STATE_DIR/UNLEASHED" ]; then printf 'UNLEASH\n'
  elif [ -f "$STATE_DIR/OPTIMIZE"  ]; then printf 'OPTIMIZE\n'
  else                                      printf 'DISCOVER\n'
  fi
}

_copy_tree(){ # rsync if present, else cp -R
  src="$1"; dst="$2"
  mkdir -p "$dst"
  if _have_rsync; then rsync -a "$src/" "$dst/"; else cp -R "$src/." "$dst/"; fi
}

_docs_create_fallback(){
  d="$1"
  mkdir -p "$d"/{04-progress,05-decisions}
  [ -f "$d/README.md" ] || printf "# Project Docs\n\nThis folder is managed with Cohesion.\n" > "$d/README.md"
  [ -f "$d/STATE.md"  ] || printf "# State\n\n- Status: DISCOVER\n- Last updated: %s\n" "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" > "$d/STATE.md"
  [ -f "$d/DETAILED_EXECUTION_PLAN.md" ] || printf "# Detailed Execution Plan\n\n- TODO\n" > "$d/DETAILED_EXECUTION_PLAN.md"
}

_docs_write_env(){
  claude_dir="$1"; docs_dir="$2"; allow="$3"
  mkdir -p "$claude_dir"
  {
    echo "# Generated by cohesion init"
    echo "DOCS_DIR=\"$docs_dir\""
    echo "ALLOW_DISCOVER_DOC_WRITES=$allow"
  } > "$claude_dir/docs.env"
}

append_gitignore_fragment() {
  gi="$PROJECT_DIR/.gitignore"
  frag="$COHESION_DIR/templates/.gitignore.cohesion"
  [ -f "$frag" ] || return 0
  touch "$gi"
  if ! grep -q '### Cohesion (.claude) ###' "$gi"; then
    printf '\n' >> "$gi"
    cat "$frag" >> "$gi"
  fi
}

update_manifest_project_add() {
  [ -f "$MANIFEST_FILE" ] || return 0
  have_jq || return 0
  ts="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
  tmp="${MANIFEST_FILE}.tmp"
  jq --arg proj "$PROJECT_DIR" --arg time "$ts" \
     '.projects[$proj] = {"installed_at": $time}' \
     "$MANIFEST_FILE" > "$tmp" && mv "$tmp" "$MANIFEST_FILE"
}

update_manifest_project_del() {
  [ -f "$MANIFEST_FILE" ] || return 0
  have_jq || return 0
  tmp="${MANIFEST_FILE}.tmp"
  jq --arg proj "$PROJECT_DIR" 'del(.projects[$proj])' \
     "$MANIFEST_FILE" > "$tmp" && mv "$tmp" "$MANIFEST_FILE"
}

docs_auto_init(){ # docs_auto_init [docs_dir] [source: template|create-this]
  docs_dir_in="${1:-}"
  source_in="${2:-}"

  if [ -n "${docs_dir_in}" ]; then target="${docs_dir_in}"; else target="${PROJECT_DIR}/docs"; fi
  mkdir -p "$target"

  source="$source_in"
  if [ -z "$source" ]; then source="template"; fi

  if [ "$source" = "template" ]; then
    tpl="$COHESION_DIR/templates/docs"
    if [ -d "$tpl" ] && [ -n "$(ls -A "$tpl" 2>/dev/null || true)" ]; then
      _copy_tree "$tpl" "$target"
    else
      _docs_create_fallback "$target"
    fi
  else
    _docs_create_fallback "$target"
  fi

  _docs_write_env "$CLAUDE_DIR" "$target" 1
}

cmd="${1:-help}"
case "$cmd" in
  status)
    echo "Cohesion Status"
    echo "==============="
    echo "Binary:   $(command -v cohesion || printf '%s' "$0")"
    if [ -f "$MANIFEST_FILE" ] && have_jq; then
      printf "Version:  "; jq -r '.version // "unknown"' "$MANIFEST_FILE" || echo "unknown"
      printf "Globals:  "; jq -r '.global_files | length // 0' "$MANIFEST_FILE" || echo "0"
    else
      echo "Version:  (manifest missing or jq not installed)"
    fi
    if [ -d "$CLAUDE_DIR" ]; then
      echo "Project:  $PROJECT_DIR"
      echo "State:    $(project_state)"
      [ -d "$HOOKS_DIR" ] && echo "Hooks:    present" || echo "Hooks:    missing"
      [ -f "$UTILS_DIR/hook-utils.sh" ] && echo "Utils:    present" || echo "Utils:    missing"
      if [ -f "$CLAUDE_DIR/docs.env" ]; then
        docs_rel="$(grep -E '^DOCS_DIR=' "$CLAUDE_DIR/docs.env" | cut -d= -f2- | tr -d '"' || true)"
        [ -n "${docs_rel:-}" ] && echo "Docs:     ${docs_rel}"
      fi
    else
      echo "Project:  not initialized (.claude missing)"
    fi
    ;;

  init)
    shift || true
    DOCS_DIR_FLAG=""; DOCS_SOURCE_FLAG=""
    while [ $# -gt 0 ]; do
      case "$1" in
        --docs-dir)    DOCS_DIR_FLAG="${2:-}"; shift 2 ;;
        --docs-source) DOCS_SOURCE_FLAG="${2:-}"; shift 2 ;;
        *) break ;;
      esac
    done
    echo "Initializing Cohesion in: $PROJECT_DIR"
    ensure_dirs
    _spin "Copying hooks" _copy_tree "${COHESION_DIR}/hooks" "$HOOKS_DIR"
    _spin "Copying utils" _copy_tree "${COHESION_DIR}/utils" "$UTILS_DIR"
    chmod +x "$HOOKS_DIR"/*.sh 2>/dev/null || true
    [ -f "${COHESION_DIR}/protected.conf" ] && cp "${COHESION_DIR}/protected.conf" "$CLAUDE_DIR/" || true
    
    # Copy settings templates from templates directory
    if [ -f "${COHESION_DIR}/templates/.claude/settings.json" ]; then
      cp "${COHESION_DIR}/templates/.claude/settings.json" "$CLAUDE_DIR/settings.json"
    elif [ -f "${COHESION_DIR}/settings.json" ]; then
      cp "${COHESION_DIR}/settings.json" "$CLAUDE_DIR/settings.json"
    fi
    
    # Copy unleash settings template
    if [ -f "${COHESION_DIR}/templates/.claude/settings.unleash.json" ]; then
      cp "${COHESION_DIR}/templates/.claude/settings.unleash.json" "$CLAUDE_DIR/settings.unleash.json"
    fi
    
    # Copy optimize settings template
    if [ -f "${COHESION_DIR}/templates/.claude/settings.optimize.json" ]; then
      cp "${COHESION_DIR}/templates/.claude/settings.optimize.json" "$CLAUDE_DIR/settings.optimize.json"
    fi
    
    # Copy CLAUDE.md to project root if it doesn't exist
    if [ ! -f "${PROJECT_DIR}/CLAUDE.md" ] && [ -f "${COHESION_DIR}/templates/CLAUDE.md" ]; then
      cp "${COHESION_DIR}/templates/CLAUDE.md" "${PROJECT_DIR}/CLAUDE.md"
      echo "✓ Added CLAUDE.md with DUO protocol instructions"
    fi
    update_manifest_project_add
    append_gitignore_fragment
    _spin "Setting up docs" docs_auto_init "${DOCS_DIR_FLAG}" "${DOCS_SOURCE_FLAG}"
    echo "✓ Initialized"
    ;;

  uninstall)
    if [ "${2:-}" = "--global" ]; then
      if [ -x "${BIN_DIR}/cohesion-uninstall-global.sh" ]; then
        exec "${BIN_DIR}/cohesion-uninstall-global.sh"
      else
        echo "Global uninstall script not found at ${BIN_DIR}/cohesion-uninstall-global.sh"
        exit 1
      fi
    fi
    echo "Uninstalling from: $PROJECT_DIR"
    rm -rf "$HOOKS_DIR" "$UTILS_DIR" "$STATE_DIR"
    rmdir "$CLAUDE_DIR" 2>/dev/null || true
    update_manifest_project_del
    echo "✓ Uninstalled"
    ;;

  protect)
    if [ "${2:-}" = "--wizard" ]; then
      if [ -x "${BIN_DIR}/cohesion-protect" ]; then
        exec "${BIN_DIR}/cohesion-protect" --wizard
      else
        echo "Protect wizard not found at ${BIN_DIR}/cohesion-protect"
        exit 1
      fi
    else
      echo "Usage: cohesion protect --wizard"
      exit 2
    fi
    ;;

  doctor)
    if [ -x "${BIN_DIR}/cohesion-doctor.sh" ]; then
      exec "${BIN_DIR}/cohesion-doctor.sh"
    elif [ -x "${COHESION_DIR}/scripts/doctor.sh" ]; then
      exec "${COHESION_DIR}/scripts/doctor.sh"
    else
      echo "Doctor script not found (expected in ${BIN_DIR} or ${COHESION_DIR}/scripts)"
      exit 1
    fi
    ;;

  *)
    echo "Usage: cohesion {status|init|uninstall [--global]|protect --wizard|doctor}"
    exit 2
    ;;
esac
